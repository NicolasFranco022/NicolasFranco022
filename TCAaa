#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define TAM 50

typedef enum
{
    INFO = 1,
    MEC,
    MAMB,
    TADS,
    TGA,
    CSOC
} enum_curso;

typedef struct
{
    char *nome;
    enum_curso curso;
    int ano;
} Tturma;

typedef enum
{
    Goleiro = 1,
    AlaD,
    AlaE,
    Fixo,
    Pivo
} enum_posicao;

typedef struct
{

    int dia;
    int mes;
    int ano;
} Tdata;

typedef struct
{

    char *nome;
    char *matricula;
    int num_Camisa;
    enum_posicao **posicao;
    Tdata data_Nasc;
    Tturma turma;
    int pos_posicao;
} Tjogador;

typedef struct
{

    char *nome;
    char *tecnico;
    Tjogador *jogadores;
    Tturma *turmas;
    int posicao_jogador;
    int posicao_turma;
} Ttime;

Tturma *pTurma;
Ttime *pTime;
int num_turmas = 0;
int num_times = 0;

void menssagem_ACERTO(int codigoACERTO);         // Acertos
void menssagem_ERRO(int codigoERRO);             // Erros
void MENU_main();                                // Mostra as opções (MAIN)
void MENU_turma();                               // Mostra as opções (TURMA)
void MENU_lista_turma();                         // Mostra as opções de listamento (TURMA)
int MENU_alterar_turma();                        // Mostra as opções de alteração (TURMA)
void dispara_MENU_main(int opcao);               // Dispara as opções escolhidas (MAIN)
void dispara_MENU_turma(int opcao);              // Dispara as opções escolhidas (TURMA)
void dispara_MENU_lista_turma(int opcao);        // Dispara as opções escolhidas de listar (TURMA)
int inclusao_turma();                            // Dispara função para incluir turma
Tturma cria_turma();                             // Cria uma turma
void imprime_turma(Tturma turma);                // Imprime uma música
void lista_turma();                              // Lista todas as turmas
void salvar_arquivo_turma();                     // Salva os dados da turma no arquivo
void recupera_dado_turma();                      // Recupera os dados da turma
int alteracao_turma();                           // Dispara função para alterar turma
int altera_turma(int opcao_alt);                 // Funcinalidade de alterar uma turma
int exclusao_turma();                            // Dispara função para excluir turma
void excluir_turma(int opcao_excl);              // Funcionalidade de excluir uma turma
void reorganizar_turma(int opcao_excl);          // Reorganiza lista de turma, depois de excluir
int validaData(int dia, int mes, int ano);       // Valida data
void MENU_time();                                // Mostra as opções (TIME)
int dispara_MENU_time(int op);                   // Dispara as opções escolhidas (TIME)
void checkNull(int op);                          // Não sei oq faz
void inclusao_time();                            // Inclui Time
Ttime cria_time();                               // Cria time
void MENU_jogador(int pos_time);                 // Mostra um menu de jogadores, exibindo os jogadores cadastrados e se deseja adicionar mais
void inclusao_jogador(int pos);                  // Adiciona e ja atualiza o numero de jogadores na memoria
Tjogador cria_jogador();                         // Cria jogador principal
int compara_turma(Tturma turma1, Tturma turma2); // Compara turma do jogador para validar se pertence a mais de 2 turma
int limiteTurmas_time(int pos, Tturma turma);    // Valida o limite de turma definido pelo prof
void dispara_MENU_lista_time(int op);            // Dispara menu de imprimir e listar TIME
void MENU_lista_time();                          // Valida e printa na tela o menu
void imprime_jogador(int i, int j);              // Imprime jogador
void lista_time();                               // Lista todos os times
void imprime_time();                             // Imprime so um time
void imprime_posicao(int op);                    // Imprime as devidas posicoes
void salvar_arquivo_time();                      // Salva os dados do time no arquivo
void recupera_dado_time();                       // Recupera os dados do time
void op_MenuAlteraTime(int op);
int menu_QualTime();
void menuAlteraTime();
void alteraNomeTime();
void alteraNomeTecnico();
void menuAtualizaJogador();
void op_AtualizaJogador(int op);
void adicionarJogador();
void menuAlteraJogador();
void op_MenuAlteraJogador(int op);
int menu_QualJogador(int i);
void altera_NomeJogador();
void altera_MatriculaJogador();
void altera_CamisaJogador();
void menu_alteraPosicao();
void op_MenuAlteraPosicao(int op);
void alterarPosicao();
void altera_DtNascJogador();
void altera_TurmaJogador();
void incluirPosicao();
void menuJogador(int pos_time);
void excluirTime();
int confirmaEscolha();
void excluirJogador();
void excluirPosicaoJogador();

int main()
{
    int opcao;
    recupera_dado_turma();
    // recupera_dado_time();
    fflush(stdin);
    while (opcao != 3)
    {

        MENU_main();
        scanf("%d", &opcao);

        if (opcao < 1 || opcao > 3)
        {
            menssagem_ERRO(0);
            system("pause");
            system("cls");
        }

        if (opcao == 3)
        {
            if (num_turmas > 0)
            {
                salvar_arquivo_turma();
                salvar_arquivo_time();
            }
            system("cls");
            menssagem_ACERTO(2);
            system("pause");
            break;
        }

        dispara_MENU_main(opcao);
    }
}

void MENU_main()
{

    system("cls");
    printf("LIGA CORUJA DE FUTSAL\n");
    printf("(1) - TURMA\n");
    printf("(2) - TIME\n");
    printf("(3) - SAIR\n\n");
    printf("Escolha a opcao: ");
}

void dispara_MENU_main(int opcao)
{

    if (opcao == 1)
    {
        MENU_turma();
    }
    else if (opcao == 2)
    {
        if (num_turmas < 1)
        {
            menssagem_ERRO(-2);
            system("pause");
            system("cls");
        }
        MENU_time();
    }
}

void MENU_turma()
{

    int op = 1;

    if (num_turmas >= 0)
    {
        while (op != 5)
        {
            if (op < 1 || op > 5)
            {
                menssagem_ERRO(0);
            }

            system("cls");
            printf("Bem-vindo ao Menu (TURMA)\n");
            printf("(1) - Incluir\n");
            printf("(2) - Alterar\n");
            printf("(3) - Excluir\n");
            printf("(4) - Listar\n");
            printf("(5) - Voltar\n");
            printf("Escolha a opcao: ");
            scanf("%d", &op);
            fflush(stdin);
            dispara_MENU_turma(op);
        }
    }
    else
    {
        menssagem_ERRO(0);
    }
}

void dispara_MENU_turma(int op)
{

    if (op == 1)
    {
        inclusao_turma();
    }
    else if (op == 2)
    {
        if (num_turmas < 1)
        {
            menssagem_ERRO(-2);
            system("pause");
            system("cls");
            MENU_main();
        }
        alteracao_turma();
    }
    else if (op == 3)
    {
        if (num_turmas < 1)
        {
            menssagem_ERRO(-2);
            system("pause");
            system("cls");
            MENU_main();
        }
        exclusao_turma();
    }
    else if (op == 4)
    {
        if (num_turmas == 0)
        {
            menssagem_ERRO(-2);
            system("pause");
            system("cls");
            MENU_main();
        }
        MENU_lista_turma();
    }
    else if (op == 5)
    {
        MENU_main();
    }
}

void MENU_time()
{
    int op = 1;

    if (num_turmas > 0)
    {
        while (op != 5)
        {
            if (op < 1 || op > 5)
            {
                menssagem_ERRO(0);
            }

            system("cls");
            printf("Bem-vindo ao Menu (TIME)\n");
            printf("(1) - Incluir\n");
            printf("(2) - Alterar\n");
            printf("(3) - Excluir\n");
            printf("(4) - Listar\n");
            printf("(5) - Voltar\n");
            printf("Escolha a opcao: ");
            scanf("%d", &op);
            fflush(stdin);
            dispara_MENU_time(op);
        }
    }
    else
    {
        menssagem_ERRO(4);
    }
}

int dispara_MENU_time(int op)
{
    if (op == 1)
    {
        inclusao_time();
        MENU_jogador(num_times - 1);
    }
    else if (op == 2)
    {
        menuAlteraTime();
    }
    else if (op == 3)
    {
        excluirTime();
    }
    else if (op == 4)
    {
        if (num_times == 0)
        {
            menssagem_ERRO(-2);
            system("pause");
            system("cls");
            MENU_main();
        }
        MENU_lista_time();
    }
    else if (op == 5)
    {
        MENU_main();
    }
}

int inclusao_turma()
{
    if (num_turmas == 0)
    {
        pTurma = (Tturma *)malloc(1 * sizeof(Tturma));
    }
    else
    {
        pTurma = (Tturma *)realloc(pTurma, (num_turmas + 1) * sizeof(Tturma));
    }

    if (!pTurma)
    {
        menssagem_ERRO(-1);
        system("pause");
        system("cls");
    }

    cria_turma();

    return 1;
}

Tturma cria_turma()
{

    Tturma turma;
    char str_aux[100];

    printf("INCLUSAO DE (TURMA) \n");
    printf("Nome: ");
    gets(str_aux);

    turma.nome = (char *)malloc((strlen(str_aux) + 1) * sizeof(char));
    strcpy(turma.nome, str_aux);
    fflush(stdin);

    printf("Curso: \n");
    printf("(1) - INFO\n");
    printf("(2) - MEC\n");
    printf("(3) - MAMB\n");
    printf("(4) - TADS\n");
    printf("(5) - TGA\n");
    printf("(6) - CSOC\n");
    scanf("%d", &turma.curso);
    fflush(stdin);
    while (turma.curso < 1 || turma.curso > 6)
    {

        menssagem_ERRO(-4);
        printf("Curso: \n");
        printf("(1) - INFO\n");
        printf("(2) - MEC\n");
        printf("(3) - MAMB\n");
        printf("(4) - TADS\n");
        printf("(5) - TGA\n");
        printf("(6) - CSOC\n");
        scanf("%d", &turma.curso);
        fflush(stdin);
    }

    printf("Ano: ");
    scanf("%d", &turma.ano);
    fflush(stdin);
    while (turma.ano <= 0)
    {

        menssagem_ERRO(-4);
        printf("Ano: ");
        scanf("%d", &turma.ano);
        fflush(stdin);
    }

    pTurma[num_turmas] = turma;
    num_turmas++;

    menssagem_ACERTO(1);
    system("pause");
    system("cls");
    MENU_main();

    return turma;
}

void imprime_turma(Tturma turma)
{

    printf("Nome: %s\n", turma.nome);
    fflush(stdin);

    if (turma.curso == 1)
    {
        printf("Curso: INFO\n");
        fflush(stdin);
    }
    else if (turma.curso == 2)
    {
        printf("Curso: MEC\n");
        fflush(stdin);
    }
    else if (turma.curso == 3)
    {
        printf("Curso: MAMB\n");
        fflush(stdin);
    }
    else if (turma.curso == 4)
    {
        printf("Curso: TADS\n");
        fflush(stdin);
    }
    else if (turma.curso == 5)
    {
        printf("Curso: TGA\n");
        fflush(stdin);
    }
    else if (turma.curso == 6)
    {
        printf("Curso: CSOC\n");
        fflush(stdin);
    }

    printf("Ano: %d\n", turma.ano);
    system("pause");
    system("cls");
}

void lista_turma()
{
    int i;

    for (i = 0; i < num_turmas; i++)
    {
        printf("----- TURMA [%d] -----\n", i + 1);
        imprime_turma(pTurma[i]);
    }
}

void MENU_lista_turma()
{
    int opcao;

    system("cls");
    printf("----- MENU LISTAR (TURMA) -----\n");
    printf("(1) - Listar turma\n");
    printf("(2) - Listar todas as turmas\n");
    printf("(3) - Voltar\n");
    scanf("%d", &opcao);
    fflush(stdin);
    system("cls");

    while (opcao <= 0 || opcao > 3)
    {
        menssagem_ERRO(0);
        system("pause");
        system("cls");
        printf("----- MENU LISTAR (TURMA) -----\n");
        printf("(1) - Listar turma\n");
        printf("(2) - Listar todas as turmas\n");
        printf("(3) - Voltar\n");
        scanf("%d", &opcao);
        fflush(stdin);
        system("cls");
    }

    dispara_MENU_lista_turma(opcao);
}

void dispara_MENU_lista_turma(int opcao)
{
    int opcao_aux = 0, i;

    if (opcao == 1)
    {
        if (num_turmas == 1)
        {
            printf("----- TURMA [%d] -----\n", 1);
            imprime_turma(pTurma[0]);
            system("cls");
            MENU_main();
        }
        else
        {
            for (i = 0; i < num_turmas; i++)
            {
                printf("TURMA [%d]\n", i + 1);
            }

            printf("Escolha a opcao: ");
            scanf("%d", &opcao_aux);
            fflush(stdin);

            system("cls");
            printf("----- TURMA [%d] -----\n", opcao_aux);
            imprime_turma(pTurma[opcao_aux - 1]);
        }
    }
    else if (opcao == 2)
    {
        lista_turma();
    }
}

void salvar_arquivo_turma()
{
    int i;
    FILE *pArquivo;

    pArquivo = fopen("C:/Users/adminTI/Desktop/codes/output/turmas.txt", "w");

    if (pArquivo == NULL)
    {
        menssagem_ERRO(-3);
        system("pause");
        system("cls");
    }

    for (i = 0; i < num_turmas; i++)
    {
        fprintf(pArquivo, "%s;", pTurma[i].nome);
        if (pTurma[i].curso == 1)
        {
            fprintf(pArquivo, "INFO;");
        }
        else if (pTurma[i].curso == 2)
        {
            fprintf(pArquivo, "MEC;");
        }
        else if (pTurma[i].curso == 3)
        {
            fprintf(pArquivo, "MAMB;");
        }
        else if (pTurma[i].curso == 4)
        {
            fprintf(pArquivo, "TADS;");
        }
        else if (pTurma[i].curso == 5)
        {
            fprintf(pArquivo, "TGA;");
        }
        else if (pTurma[i].curso == 6)
        {
            fprintf(pArquivo, "CSOC;");
        }
        fprintf(pArquivo, "%d;", pTurma[i].ano);
        fprintf(pArquivo, "%c", '\n');
    }

    fclose(pArquivo);
}

void recupera_dado_turma()
{
    int i, separador;
    char str_aux[100], caractere;
    FILE *pArquivo;

    pArquivo = fopen("C:/Users/adminTI/Desktop/codes/output/turmas.txt", "r");

    if (pArquivo)
    {
        i = 0;
        separador = 0;

        while (!feof(pArquivo))
        {
            caractere = fgetc(pArquivo);

            if ((caractere != '\n') && (caractere != ';') && (caractere != EOF))
            {
                str_aux[i] = caractere;
                i++;
            }
            else if ((caractere == ';') || (caractere == '\n'))
            {
                str_aux[i] = '\0';
                i = 0;

                if (caractere == ';')
                {
                    if (separador == 0)
                    {
                        if (num_turmas == 0)
                        {
                            pTurma = (Tturma *)malloc(1 * sizeof(Tturma));
                        }
                        else
                        {
                            pTurma = (Tturma *)realloc(pTurma, (num_turmas + 1) * sizeof(Tturma));
                        }

                        pTurma[num_turmas].nome = (char *)malloc(strlen(str_aux) + 1 * sizeof(char));
                        strcpy(pTurma[num_turmas].nome, str_aux);
                        separador++;
                    }
                    else if (separador == 1)
                    {
                        if (strcmp(str_aux, "INFO") == 0)
                        {
                            pTurma[num_turmas].curso = INFO;
                        }
                        else if (strcmp(str_aux, "MEC") == 0)
                        {
                            pTurma[num_turmas].curso = MEC;
                        }
                        else if (strcmp(str_aux, "MAMB") == 0)
                        {
                            pTurma[num_turmas].curso = MAMB;
                        }
                        else if (strcmp(str_aux, "TADS") == 0)
                        {
                            pTurma[num_turmas].curso = TADS;
                        }
                        else if (strcmp(str_aux, "TGA") == 0)
                        {
                            pTurma[num_turmas].curso = TGA;
                        }
                        else if (strcmp(str_aux, "CSOC") == 0)
                        {
                            pTurma[num_turmas].curso = CSOC;
                        }
                        separador++;
                    }
                    else if (separador == 2)
                    {
                        pTurma[num_turmas].ano = atoi(str_aux);
                        separador = 0;
                        num_turmas++;
                    }
                }
            }
        }
    }

    fclose(pArquivo);
}

int alteracao_turma()
{
    int opcao_alt = -1, resp;

    while (opcao_alt < 0 || opcao_alt >= num_turmas)
    {
        lista_turma();

        if (num_turmas > 1)
        {
            printf("Digite o atributo que deseja alterar [%d - %d]: ", 1, num_turmas);
            scanf("%d", &opcao_alt);
            fflush(stdin);
            printf("\n");
        }
        else
        {
            opcao_alt = 1;
        }

        opcao_alt--;

        if (opcao_alt < 0 || opcao_alt >= num_turmas)
        {
            menssagem_ERRO(0);
            system("pause");
            system("cls");
        }
        else
        {
            resp = altera_turma(opcao_alt);
        }
    }

    system("cls");
    if (resp > 0)
    {
        menssagem_ACERTO(3);
    }
}

int altera_turma(int opcao_alt)
{
    int atributo = 1, curso_aux = 0;
    char op;

    while (atributo > 0)
    {
        atributo = MENU_alterar_turma();
        switch (atributo)
        {
        case 1:
            system("cls");
            printf("----- Dados da turma -----\n");
            imprime_turma(pTurma[opcao_alt]);

            printf("Novo - Nome da turma: ");
            gets(pTurma[opcao_alt].nome);
            fflush(stdin);
            menssagem_ACERTO(3);
            system("pause");
            break;
        case 2:
            system("cls");
            printf("----- Dados da turma -----\n");
            imprime_turma(pTurma[opcao_alt]);

            printf("Curso: \n");
            printf("(1) - INFO\n");
            printf("(2) - MEC\n");
            printf("(3) - MAMB\n");
            printf("(4) - TADS\n");
            printf("(5) - TGA\n");
            printf("(6) - CSOC\n");
            printf("Novo - Curso da turma: ");
            scanf("%d", &curso_aux);
            fflush(stdin);
            while (curso_aux < 1 || curso_aux > 6)
            {
                menssagem_ERRO(-4);
                system("pause");
                system("cls");
                printf("Dados da turma\n");
                imprime_turma(pTurma[opcao_alt]);

                printf("Curso: \n");
                printf("(1) - INFO\n");
                printf("(2) - MEC\n");
                printf("(3) - MAMB\n");
                printf("(4) - TADS\n");
                printf("(5) - TGA\n");
                printf("(6) - CSOC\n");
                printf("Novo - Curso da turma: ");
                scanf("%d", &curso_aux);
                fflush(stdin);
            }
            if (curso_aux == 1)
            {
                pTurma[opcao_alt].curso = INFO;
            }
            else if (curso_aux == 2)
            {
                pTurma[opcao_alt].curso = MEC;
            }
            else if (curso_aux == 3)
            {
                pTurma[opcao_alt].curso = MAMB;
            }
            else if (curso_aux == 4)
            {
                pTurma[opcao_alt].curso = TADS;
            }
            else if (curso_aux == 5)
            {
                pTurma[opcao_alt].curso = TGA;
            }
            else if (curso_aux == 6)
            {
                pTurma[opcao_alt].curso = CSOC;
            }
            menssagem_ACERTO(3);
            system("pause");
            break;
        case 3:
            system("cls");
            printf("----- Dados da turma -----\n");
            imprime_turma(pTurma[opcao_alt]);

            printf("Novo - Ano da turma: ");
            scanf("%d", &pTurma[opcao_alt].ano);
            fflush(stdin);
            while (pTurma[opcao_alt].ano <= 0)
            {
                menssagem_ERRO(-4);
                system("pause");
                system("cls");
                printf("Dados da turma\n");
                imprime_turma(pTurma[opcao_alt]);

                printf("Novo - Ano da turma: ");
                scanf("%d", &pTurma[opcao_alt].ano);
                fflush(stdin);
            }
            menssagem_ACERTO(3);
            system("pause");
            break;
        case 4:
            return -1;
            break;
        }

        op = 'x';
        while (op != 's' && op != 'n')
        {
            printf("Deseja alterar outro atributo (s/n): ");
            scanf("%c", &op);
            fflush(stdin);
            op = tolower(op);

            if (op != 's' && op != 'n')
            {
                menssagem_ERRO(0);
                system("pause");
                system("cls");
            }
            else if (op == 'n')
            {
                atributo = -1;
            }
        }
    }

    return 1;
}

int MENU_alterar_turma()
{
    int op = -1;

    while (op < 1 || op > 3)
    {
        system("cls");
        printf("----- Digite o atributo a ser alterado -----\n");
        printf("(1) - Nome da turma\n");
        printf("(2) - Curso da turma\n");
        printf("(3) - Ano da turma\n");
        printf("(4) - Voltar\n");
        printf("Escolha o atributo: ");
        scanf("%d", &op);
        fflush(stdin);

        if (op < 1 || op > 4)
        {
            menssagem_ERRO(0);
            system("pause");
            system("cls");
        }
        else
        {
            return op;
        }
    }
}

int exclusao_turma()
{
    int opcao_excl = -1, exc = 0;
    char op;

    while (opcao_excl < 0 || opcao_excl >= num_turmas)
    {
        system("cls");
        if (num_turmas == 1)
        {
            op = 'x';
            while (op != 's' && op != 'n')
            {
                imprime_turma(pTurma[0]);
                printf("Deseja excluir a turma [1] ?");
                scanf("%c", &op);
                fflush(stdin);
                op = tolower(op);

                if (op != 's' && op != 'n')
                {
                    menssagem_ERRO(0);
                    system("pause");
                    system("cls");
                }
            }

            if (op == 's')
            {
                excluir_turma(0);
                exc = 1;
            }

            break;
        }
        else
        {
            lista_turma();
            printf("Digite a turma que deseja excluir [%d - %d]: ", 1, num_turmas);
            scanf("%d", &opcao_excl);
            fflush(stdin);
            opcao_excl--;

            if (opcao_excl < 0 || opcao_excl >= num_turmas)
            {
                menssagem_ERRO(-4);
                system("pause");
                system("cls");
            }
            else
            {
                op = 'x';
                while (op != 's' && op != 'n')
                {
                    imprime_turma(pTurma[opcao_excl]);
                    printf("Deseja excluir a turma [%d]: (s/n): ", opcao_excl + 1);
                    scanf("%c", &op);
                    fflush(stdin);
                    op = tolower(op);

                    if (op != 's' && op != 'n')
                    {
                        menssagem_ERRO(0);
                        system("pause");
                        system("cls");
                    }
                }
                if (op == 's')
                {
                    excluir_turma(opcao_excl);
                    exc = 1;
                }
                else if (op == 'n')
                {
                    break;
                }
            }
        }
    }

    if (exc)
    {
        menssagem_ACERTO(4);
        system("pause");
        system("cls");
    }
}

void excluir_turma(int opcao_excl)
{
    if ((num_turmas == 1) && (opcao_excl == num_turmas))
    {
        free(pTurma);
        num_turmas--;
    }
    else
    {
        reorganizar_turma(opcao_excl);
    }
}

void reorganizar_turma(int opcao_excl)
{
    int i;

    for (i = opcao_excl; i < (num_turmas - 1); i++)
    {
        pTurma[i] = pTurma[i + 1];
    }
    num_turmas--;
}

int validaData(int dia, int mes, int ano)
{

    if (dia < 1 || dia > 31)
    {

        return 0;
    }

    else if (mes < 1 || mes > 12)
    {

        return 0;
    }

    else if (mes < 0)
    {

        return 0;
    }

    else if (mes == 2)
    {

        if (dia > 29)
        {

            return 0;
        }
        else if (!(ano % 4 == 0 && ano % 100 != 0) || ano % 400 == 0 && (dia > 28))
        {

            return 0;
        }
    }

    else if ((mes == 4 || mes == 6 || mes == 9 || mes == 11) && (dia > 30))
    {

        return 0;
    }

    return 1;
}

void menssagem_ACERTO(int codigoACERTO)
{
    switch (codigoACERTO)
    {
    case 1:
        printf("\nInclusao bem sucedida!!!\n");
        break;
    case 2:
        printf("Saindo!!!\n");
        break;
    case 3:
        printf("\nAlteracao bem sucedida!!!\n");
        break;
    case 4:
        printf("\nExclusao bem sucedida!!!\n");
        break;
    default:
        break;
    }
}

void menssagem_ERRO(int codigoERRO)
{

    switch (codigoERRO)
    {
    case 0:
        printf("ERRO: Opcao invalida!!!\n");
        break;
    case -1:
        printf("ERRO: Falha na alocacao de memoria!!!\n");
        break;
    case -2:
        printf("ERRO: Lista de turma vazia!!!\n");
        break;
    case -3:
        printf("ERRO: Falha ao salvar no arquivo!!!\n");
        break;
    case -4:
        printf("ERRO: Digite corretamente!!!\n");
        break;
        printf("ERRO!!!\n");
        break;
    case -5:
        printf("ERRO - Posicao Inexistente!\n");
        break;
    case -6:
        printf("ERRO - Posicao Ja Cadastrada!\n");
        break;
    case -7:
        printf("ERRO - Turma nao cadastrada!\n");
        break;
    case -8:
        printf("ERRO - Data invalida!\n");
        break;
    case -9:
        printf("ERRO - Limite de turma ultrapassado!\n");
        break;
    default:
        break;
    }
}

void checkNull(int op)
{

    switch (op)
    {
    case 1:
        if (!pTime)
        {
            printf("deu ruim");
            // imprime_Erro(2);
            // exit(1);
        }
        break;
    case 2:
        if (!pTime)
        {
            printf("deu ruim");
            // exit(1);
        }
        break;
    }
}

void inclusao_time()
{
    if (num_times == 0)
    {
        pTime = (Ttime *)malloc(1 * sizeof(Ttime));

        checkNull(2);
    }
    else
    {
        pTime = (Ttime *)realloc(pTime, (num_times + 1) * sizeof(Ttime));

        checkNull(2);
    }

    pTime[num_times++] = cria_time();
}

Ttime cria_time()
{
    Ttime time;
    char str_aux[100];

    system("cls");
    printf("INCLUSAO DE (TIME)\n");
    printf("Nome do Time: ");
    gets(str_aux);
    time.nome = (char *)malloc((strlen(str_aux) + 1) * sizeof(char));
    strcpy(time.nome, str_aux);
    fflush(stdin);

    printf("Nome do Tecnico: ");
    gets(str_aux);
    time.tecnico = (char *)malloc((strlen(str_aux) + 1) * sizeof(char));
    strcpy(time.tecnico, str_aux);
    fflush(stdin);

    time.posicao_jogador = 0;
    time.posicao_turma = 0;

    return time;
}

void MENU_jogador(int pos_time)
{
    char op = 's';

    printf("Jogadores:\n");
    while (op == 's' || op == 'S')
    {
        inclusao_jogador(pTime[pos_time].posicao_jogador);
        pTime[pos_time].posicao_jogador++;
        system("cls");
        printf("Adicionar Jogador? (s/qualquer outro caractere para n): ");
        scanf("%c", &op);
        fflush(stdin);
    }
}

void inclusao_jogador(int pos)
{

    if (pos == 0)
    {
        pTime[num_times - 1].jogadores = (Tjogador *)malloc(1 * sizeof(Tjogador));
    }
    else
    {
        pTime[num_times - 1].jogadores = (Tjogador *)realloc(pTime[num_times - 1].jogadores, (pos + 1) * sizeof(Tjogador));
    }

    if (pTime[num_times - 1].jogadores == NULL)
    {
        menssagem_ERRO(-1);
    }

    pTime[num_times - 1].jogadores[pos] = cria_jogador();
}

Tjogador cria_jogador()
{

    Tjogador jogador;
    int i, turma, j, true, k;
    char str_aux[50], op = 's';

    jogador.pos_posicao = 0;

    printf("Nome do Jogador: ");
    gets(str_aux);
    jogador.nome = (char *)malloc((strlen(str_aux) + 1) * sizeof(char));
    strcpy(jogador.nome, str_aux);
    fflush(stdin);

    printf("Matricula: ");
    gets(str_aux);
    jogador.matricula = (char *)malloc((strlen(str_aux) + 1) * sizeof(char));
    strcpy(jogador.matricula, str_aux);
    fflush(stdin);

    printf("Numero da Camisa: ");
    scanf("%d", &jogador.num_Camisa);

    while (op == 's' || op == 'S')
    {

        if (jogador.pos_posicao == 0)
        {
            jogador.posicao = (enum_posicao *)malloc(1 * sizeof(enum_posicao));
        }
        else
        {
            jogador.posicao = (enum_posicao *)realloc(jogador.posicao, (jogador.pos_posicao + 1) * sizeof(enum_posicao));
        }

        if (jogador.posicao == NULL)
        {
            menssagem_ERRO(-1);
        }
        jogador.pos_posicao++;

        printf("Posicao:\n");
        do
        {
            printf("(1) - Goleiro\n");
            printf("(2) - Fixo\n");
            printf("(3) - AlaD\n");
            printf("(4) - AlaE\n");
            printf("(5) - Pivo\n");
            scanf("%d", &jogador.posicao[jogador.pos_posicao - 1]);
            fflush(stdin);
            if (jogador.posicao[jogador.pos_posicao - 1] < 1 || jogador.posicao[jogador.pos_posicao - 1] > 5)
            {
                menssagem_ERRO(-5);
            }
            true = 0;
            for (j = 0; j < (jogador.pos_posicao - 1); j++)
            {
                for (k = 0; k <= (jogador.pos_posicao - 1); k++)
                {
                    if (jogador.posicao[j] == jogador.posicao[k])
                    {
                        true ++;
                    }
                }
                if (true > 1)
                {
                    menssagem_ERRO(-6);
                    break;
                }
                true = 0;
            }

        } while (jogador.posicao[jogador.pos_posicao - 1] < 1 || jogador.posicao[jogador.pos_posicao - 1] > 5 || true > 1);

        printf("Deseja adicionar outra posicao? (s/qualquer outro caractere para n): ");
        scanf("%c", &op);
        fflush(stdin);
    }

    do
    {
        printf("Data de Nascimento:\n");
        printf("Dia: ");
        scanf("%d", &jogador.data_Nasc.dia);
        printf("Mes: ");
        scanf("%d", &jogador.data_Nasc.mes);
        printf("Ano: ");
        scanf("%d", &jogador.data_Nasc.ano);
        fflush(stdin);
        if (validaData(jogador.data_Nasc.dia, jogador.data_Nasc.mes, jogador.data_Nasc.ano) == 0)
        {
            menssagem_ERRO(-8);
        }

    } while (validaData(jogador.data_Nasc.dia, jogador.data_Nasc.mes, jogador.data_Nasc.ano) == 0);

    printf("Turmas Cadastradas:\n");
    for (i = 0; i < num_turmas; i++)
    {
        printf("Turma [%d]\n", i + 1);
        printf("Nome - %s\n", pTurma[i].nome);
    }

    do
    {
        printf("Turma do Jogador: ");
        scanf("%d", &turma);
        fflush(stdin);
        turma--;
        if (turma < 0 || turma > (num_turmas - 1))
        {
            menssagem_ERRO(-7);
        }

    } while ((turma < 0 || turma > (num_turmas - 1)) || (limiteTurmas_time(pTime[num_times - 1].posicao_turma, pTurma[turma]) == 1));

    jogador.turma = pTurma[turma];
    if (limiteTurmas_time(pTime[num_times - 1].posicao_turma, pTurma[turma]) == 0)
    {
        pTime[num_times - 1].turmas[pTime[num_times - 1].posicao_turma++] = pTurma[turma];
    }

    return jogador;
}

int limiteTurmas_time(int pos, Tturma turma)
{

    if (pos == 0)
    {
        pTime[num_times - 1].turmas = (Tturma *)malloc(1 * sizeof(Tturma));
        if (pTime[num_times - 1].turmas == NULL)
        {
            menssagem_ERRO(-1);
            // exit(1);
        }
        return 0;
    }
    else if (pos == 1)
    {

        if (compara_turma(pTime[num_times - 1].turmas[0], turma) == 1)
        {
            pTime[num_times - 1].turmas = (Tturma *)realloc(pTime[num_times - 1].turmas, 2 * sizeof(Tturma));
            if (pTime[num_times - 1].turmas == NULL)
            {
                menssagem_ERRO(-1);
                exit(1);
            }
            return 0;
        }
        else
        {
            return 2;
        }
    }
    else
    {
        if (compara_turma(pTime[num_times - 1].turmas[0], turma) == 1 && compara_turma(pTime[num_times - 1].turmas[1], turma) == 1)
        {
            menssagem_ERRO(-9);
            return 1;
        }
        else
        {
            return 2;
        }
    }
}

int compara_turma(Tturma turma1, Tturma turma2)
{
    return ((turma1.curso == turma2.curso) && (turma1.ano == turma2.ano) && (strcmp(turma1.nome, turma2.nome) == 0)) ? 0 : 1;
}

void MENU_lista_time()
{
    int op;

    if (!pTime[num_times - 1].jogadores)
    {
        printf("Nao Alocou Memoria\n");
        exit(1);
    }

    if (num_times == 0)
    {
        printf("\n");
        menssagem_ERRO(-2);
    }
    else
    {
        system("cls");
        printf("Menu listar (TIME):\n");
        printf("(1) - Lista time\n");
        printf("(2) - Lista todos os times\n");
        printf("(3) - Voltar\n");
        printf("Escolha a opcao: ");
        scanf("%d", &op);
        dispara_MENU_lista_time(op);
    }
}

void dispara_MENU_lista_time(int op)
{
    switch (op)
    {
    case 1:
        imprime_time();
        break;
    case 2:
        lista_time();
        break;
    default:
        break;
    }
}

void imprime_time()
{
    int i = -1, j, index;

    if (num_times == 1)
    {
        i = 0;
        printf("\n");
        printf("TIME [%d]\n", i + 1);

        printf("Nome - %s\n", pTime[i].nome);
        printf("Tecnico - %s\n\n", pTime[i].tecnico);
        printf("JOGADORES - \n", pTime[i].jogadores);

        for (j = 0; j < pTime[i].posicao_jogador; j++)
        {
            printf("Jogador [%d] \n", j + 1);
            printf("Nome - %s\n", pTime[i].jogadores[j].nome);
            printf("Matricula - %s\n", pTime[i].jogadores[j].matricula);
            printf("Numero da Camisa - %d\n", pTime[i].jogadores[j].num_Camisa);
            printf("Posicao - ");

            for (int k = 0; k < pTime[i].jogadores[j].pos_posicao; k++)
            {
                imprime_posicao(pTime[i].jogadores[j].posicao[k]);
                if (k == (pTime[i].jogadores[j].pos_posicao - 1))
                {
                    printf("\n");
                }
                else
                {
                    printf(", ");
                }
            }
            printf("Data de Nascimento - %d/%d/%d\n", pTime[i].jogadores[j].data_Nasc.dia, pTime[i].jogadores[j].data_Nasc.mes, pTime[i].jogadores[j].data_Nasc.ano);
            printf("Turma - %s\n", pTime[i].jogadores[j].turma.nome);
        }
        system("pause");
    }
    else
    {
        while (i < 0 || i >= num_times)
        {
            system("cls");
            for (index = 0; index < num_times; index++)
            {
                printf("TIME [%d]\n", index + 1);
            }
            printf("Qual time deseja listar? ");
            scanf("%d", &i);
            fflush(stdin);
            i--;
            if (i < 0 || i >= num_times)
            {
                menssagem_ERRO(9);
            }
        }
        printf("\n");
        printf("TIME [%d]\n", i + 1);
        printf("Nome - %s\n", pTime[i].nome);
        printf("Tecnico - %s\n\n", pTime[i].tecnico);
        printf("JOGADORES - \n", pTime[i].jogadores);
        for (j = 0; j < pTime[i].posicao_jogador; j++)
        {
            printf("Jogador [%d] \n", j + 1);
            printf("Nome - %s", pTime[i].jogadores[j].nome);
            printf("Matricula - %s\n", pTime[i].jogadores[j].matricula);
            printf("Numero da Camisa - %d\n", pTime[i].jogadores[j].num_Camisa);
            printf("Posicao - ");

            for (int k = 0; k < pTime[i].jogadores[j].pos_posicao; k++)
            {
                imprime_posicao(pTime[i].jogadores[j].posicao[k]);
                if (k == (pTime[i].jogadores[j].pos_posicao - 1))
                {
                    printf("\n");
                }
                else
                {
                    printf(", ");
                }
            }
            printf("Data de Nascimento - %d/%d/%d\n", pTime[i].jogadores[j].data_Nasc.dia, pTime[i].jogadores[j].data_Nasc.mes, pTime[i].jogadores[j].data_Nasc.ano);
            printf("Turma - %s\n", pTime[i].jogadores[j].turma.nome);
        }
    }
    system("pause");
}

void lista_time()
{
    int i, j;

    printf("\n");
    for (i = 0; i < num_times; i++)
    {
        printf("TIME [%d]\n", i + 1);
        printf("Nome: %s\n", pTime[i].nome);
        printf("Tecnico: %s\n\n", pTime[i].tecnico);
        printf("%s\n", pTime[i].posicao_jogador > 0 ? "JOGADORES - " : "[SEM JOGADORES]");
        for (j = 0; j < pTime[i].posicao_jogador; j++)
        {
            imprime_jogador(i, j);
            printf("\n");
        }
        system("pause");
    }
}

void imprime_jogador(int i, int j)
{
    int k;
    printf("Jogador [%d] - \n", j + 1);
    printf("Nome - %s\n", pTime[i].jogadores[j].nome);
    printf("Matricula - %s\n", pTime[i].jogadores[j].matricula);
    printf("Numero da Camisa - %d\n", pTime[i].jogadores[j].num_Camisa);
    printf("Posicao - ");

    for (k = 0; k < pTime[i].jogadores[j].pos_posicao; k++)
    {
        imprime_posicao(pTime[i].jogadores[j].posicao[k]);
        if (k == (pTime[i].jogadores[j].pos_posicao - 1))
        {
            printf("\n");
        }
        else
        {
            printf(", ");
        }
    }
    printf("Data de Nascimento - %d/%d/%d\n", pTime[i].jogadores[j].data_Nasc.dia, pTime[i].jogadores[j].data_Nasc.mes, pTime[i].jogadores[j].data_Nasc.ano);
    printf("Turma - %s\n", pTime[i].jogadores[j].turma.nome);
}

void imprime_posicao(int op)
{
    switch (op)
    {
    case 1:
        printf("Goleiro");
        break;
    case 2:
        printf("AlaD");
        break;
    case 3:
        printf("Pivo");
        break;
    case 4:
        printf("AlaE");
        break;
    case 5:
        printf("Fixo");
        break;
    default:
        break;
    }
}

void salvar_arquivo_time()
{
    int i, j, k;
    FILE *pArquivo;

    pArquivo = fopen("C:/VSCODE/coisas/VSCODE-COD/times.txt", "w");

    if (pArquivo == NULL)
    {
        printf("Erro ao abrir o arquivo!\n");
        return;
    }

    for (i = 0; i < num_times; i++)
    {
        fprintf(pArquivo, "%s;", pTime[i].nome);
        fprintf(pArquivo, "%s;", pTime[i].tecnico);
        for (j = 0; j < pTime[i].posicao_jogador; j++)
        {
            fprintf(pArquivo, "%s@", pTime[i].jogadores[j].nome);
            fprintf(pArquivo, "%s@", pTime[i].jogadores[j].matricula);
            fprintf(pArquivo, "%d@", pTime[i].jogadores[j].num_Camisa);
            for (k = 0; k < pTime[i].jogadores[j].pos_posicao; k++)
            {
                fprintf(pArquivo, "%d$", pTime[i].jogadores[j].posicao[k]);
            }

            fprintf(pArquivo, "%d#%d#%d#", pTime[i].jogadores[j].data_Nasc.dia, pTime[i].jogadores[j].data_Nasc.mes, pTime[i].jogadores[j].data_Nasc.ano);
            fprintf(pArquivo, "%s!", pTime[i].jogadores[j].turma.nome);
        }
        fprintf(pArquivo, "\n");
    }

    fclose(pArquivo);
}

/*void recupera_dado_time()
{
    int i, separador, t = 0, pos_aux, pos;
    char str_aux[100], caractere;
    FILE *pArquivo;

    pArquivo = fopen("C:/VSCODE/coisas/VSCODE-COD/times.txt", "r");

    if (pArquivo)
    {
        i = 0;
        separador = 0;

        while (!feof(pArquivo))
        {
            caractere = fgetc(pArquivo);

            if ((caractere != '\n') && (caractere != ';') && (caractere != '@') && (caractere != '$') && (caractere != '#') && (caractere != '!') && (caractere != EOF))
            {
                str_aux[i] = caractere;
                i++;
            }
            else if ((caractere != '\n') || (caractere != ';') || (caractere != '@') || (caractere != '$') || (caractere != '#') || (caractere != '!'))
            {
                str_aux[i] = '\0';
                i = 0;

                if (caractere == ';')
                {
                    if (separador == 0)
                    {
                        if (num_times == 0)
                        {
                            pTime = (Ttime *)malloc(1 * sizeof(Ttime));
                        }
                        else
                        {
                            pTime = (Ttime *)realloc(pTime, (num_times + 1) * sizeof(Ttime));
                        }

                        pTime[num_times].nome = (char *)malloc(strlen(str_aux) + 1 * sizeof(char));
                        strcpy(pTime[num_times].nome, str_aux);
                        pos = 0;
                        separador++;
                    }
                    else if (separador == 1)
                    {
                        pTime[num_times].tecnico = (char *)malloc(strlen(str_aux) + 1 * sizeof(char));
                        strcpy(pTime[num_times].tecnico, str_aux);
                        num_times++;
                        separador = 0;
                    }
                }
                else if (caractere == '@')
                {
                    if (separador == 0)
                    {
                        if (pos == 0)
                        {
                            pTime[num_times - 1].jogadores = (Tjogador *)malloc(1 * sizeof(Tjogador));
                        }
                        else
                        {
                            pTime[num_times - 1].jogadores = (Tjogador *)realloc(pTime[num_times - 1].jogadores, (pos + 1) * sizeof(Tjogador));
                        }

                        pTime[num_times - 1].jogadores[pos].nome = (char *)malloc(strlen(str_aux) + 1 * sizeof(char));
                        strcpy(pTime[num_times - 1].jogadores[pos].nome, str_aux);
                        pTime[num_times - 1].jogadores[pos].pos_posicao = 0;
                        separador++;
                    }
                    else if (separador == 1)
                    {
                        pTime[num_times - 1].jogadores[pos].matricula = (char *)malloc(strlen(str_aux) + 1 * sizeof(char));
                        strcpy(pTime[num_times - 1].jogadores[pos].matricula, str_aux);
                        separador++;
                    }
                    else if (separador == 2)
                    {
                        pTime[num_times - 1].jogadores[pos].num_Camisa = atoi(str_aux);
                        separador = 0;
                    }
                }
                else if (caractere == '$')
                {
                    if (separador == 0)
                    {
                        if (pTime[num_times - 1].jogadores[pos].pos_posicao == 0)
                        {
                            pTime[num_times - 1].jogadores[pos].posicao = (enum_posicao *)malloc(1 * sizeof(enum_posicao));
                        }
                        else
                        {
                            pTime[num_times - 1].jogadores[pos].posicao = (enum_posicao *)realloc(pTime[num_times - 1].jogadores[pos].posicao, (pTime[num_times - 1].jogadores[pos].pos_posicao + 1) * sizeof(enum_posicao));
                        }

                        pos_aux = atoi(str_aux);

                        if (pos_aux == 1)
                        {
                            pTime[num_times - 1].jogadores[pos].posicao[t] = Goleiro;
                        }
                        else if (pos_aux == 2)
                        {
                            pTime[num_times - 1].jogadores[pos].posicao[t] = Fixo;
                        }
                        else if (pos_aux == 3)
                        {
                            pTime[num_times - 1].jogadores[pos].posicao[t] = AlaD;
                        }
                        else if (pos_aux == 4)
                        {
                            pTime[num_times - 1].jogadores[pos].posicao[t] = AlaE;
                        }
                        else if (pos_aux == 5)
                        {
                            pTime[num_times - 1].jogadores[pos].posicao[t] = Fixo;
                        }

                        pTime[num_times - 1].jogadores[pos].pos_posicao++;
                        t++;
                        separador = 0;
                    }
                }
                else if (caractere == '#')
                {
                    if (separador == 0)
                    {
                        pTime[num_times - 1].jogadores[pos].data_Nasc.dia = atoi(str_aux);
                        separador++;
                    }
                    else if (separador == 1)
                    {
                        pTime[num_times - 1].jogadores[pos].data_Nasc.mes = atoi(str_aux);
                        separador++;
                    }
                    else if (separador == 2)
                    {
                        pTime[num_times - 1].jogadores[pos].data_Nasc.ano = atoi(str_aux);
                        separador = 0;
                    }
                }
                else if (caractere == "!")
                {
                    if (separador == 0)
                    {
                        if (pTime[num_times - 1].posicao_turma == 0)
                        {
                            pTime[num_times - 1].turmas = (Tturma *)malloc(1 * sizeof(Tturma));
                        }
                        else
                        {
                            pTime[num_times - 1].turmas = (Tturma *)realloc(pTime[num_times - 1].turmas, (pTime[num_times - 1].posicao_turma + 1) * sizeof(Tturma));
                        }

                        pTime[num_times - 1].turmas[pos].nome = (char *)malloc((strlen(str_aux) + 1) * sizeof(char));
                        strcpy(pTime[num_times - 1].turmas[pos].nome, str_aux);
                        pTime[num_times - 1].jogadores[pos].turma.nome = pTime[num_times - 1].turmas[pos].nome;
                        pos++;
                        separador = 0;
                        t = 0;
                    }
                }
            }
        }
    }
    fclose(pArquivo);
}*/

void op_MenuAlteraTime(int op)
{

    int i;
    switch (op)
    {
    case 1:
        printf("\nALTERACAO DE NOME DO TIME - \n\n");
        alteraNomeTime();
        break;
    case 2:
        printf("\nALTERACAO DE NOME DO TECNICO - \n\n");
        alteraNomeTecnico();
        break;
    case 3:
        menuAtualizaJogador();
        break;
    default:
        break;
    }
}

int menu_QualTime()
{
    int i = 0;
    if (num_times > 1)
    {
        i = -1;
        while (i < 0 || i >= num_times)
        {
            printf("Qual o time? ");
            scanf("%d", &i);
            fflush(stdin);
            (i)--;

            if (i < 0 || i >= num_times)
            {
                menssagem_ERRO(-10);
            }
        }
    }
    return i;
}

void menuAlteraTime()
{

    int op = 1;

    while (op != 4)
    {
        if (op < 1 || op > 4)
        {
            menssagem_ERRO(0);
        }

        system("cls");
        printf("MENU ALTERAR TIME\n");
        printf("1. Nome do Time\n");
        printf("2. Nome do Tecnico\n");
        printf("3. Jogadores\n");
        printf("4. Voltar\n");
        printf("OPCAO: ");
        scanf("%d", &op);
        fflush(stdin);
        op_MenuAlteraTime(op);
    }
}

void alteraNomeTime()
{
    char str_aux[100];
    int i;

    i = menu_QualTime();

    printf("\n");
    printf("TIME [%d] - \n", i + 1);
    printf("Nome do Time: ");
    gets(str_aux);
    fflush(stdin);
    pTime[i].nome = (char *)malloc((strlen(str_aux) + 1) * sizeof(char));
    strcpy(pTime[i].nome, str_aux);
    fflush(stdin);
}

void alteraNomeTecnico()
{
    char str_aux[100];
    int i;

    i = menu_QualTime();

    printf("\n");
    printf("TIME [%d] - \n", i + 1);
    printf("Nome do Tecnico: ");
    gets(str_aux);
    fflush(stdin);
    pTime[i].tecnico = (char *)malloc((strlen(str_aux) + 1) * sizeof(char));
    strcpy(pTime[i].tecnico, str_aux);
    fflush(stdin);
}

void menuAtualizaJogador()
{

    int op = 1;

    while (op != 4)
    {
        if (op < 1 || op > 4)
        {
            menssagem_ERRO(0);
        }

        system("cls");
        printf("MENU ATUALIZAR JOGADORES\n");
        printf("1. Incluir Novo Jogador\n");
        printf("2. Alterar Jogador\n");
        printf("3. Excluir Jogador\n");
        printf("4. Voltar\n");
        printf("OPCAO: ");
        scanf("%d", &op);
        fflush(stdin);
        op_AtualizaJogador(op);
    }
}

void op_AtualizaJogador(int op)
{
    switch (op)
    {
    case 1:
        printf("INCLUSAO DE JOGADOR -\n");
        adicionarJogador();
        break;
    case 2:
        printf("ALTERACAO DE JOGADOR -\n");
        menuAlteraJogador();
        break;
    case 3:
        printf("EXCLUSAO DE JOGADOR -\n");
        excluirJogador();
        break;
    default:
        break;
    }
}

void adicionarJogador()
{

    int i;

    i = menu_QualTime();
    printf("TIME [%d] - \n", i + 1);
    menuJogador(i);
}

void menuAlteraJogador()
{

    int op = 1;

    while (op != 7)
    {
        if (op < 1 || op > 7)
        {
            menssagem_ERRO(0);
        }

        printf("\n");
        printf("MENU ALTERAR JOGADORES\n");
        printf("1. Nome\n");
        printf("2. Matricula\n");
        printf("3. Numero da Camisa\n");
        printf("4. Posicoes\n");
        printf("5. Data de Nascimento\n");
        printf("6. Turma\n");
        printf("7. Voltar\n");
        printf("OPCAO: ");
        scanf("%d", &op);
        fflush(stdin);
        op_MenuAlteraJogador(op);
    }
}

void op_MenuAlteraJogador(int op)
{

    switch (op)
    {
    case 1:
        system("cls");
        printf("\nALTERACAO DE NOME DO JOGADOR - \n\n");
        altera_NomeJogador();
        break;
    case 2:
        system("cls");
        printf("\nALTERACAO DE MATRICULA DO JOGADOR - \n\n");
        altera_MatriculaJogador();
        break;
    case 3:
        system("cls");
        printf("\nALTERACAO DE NUMERO DE CAMISA DO JOGADOR - \n\n");
        altera_CamisaJogador();
        break;
    case 4:
        system("cls");
        printf("\nALTERACAO DE POSICAO DO JOGADOR - \n\n");
        menu_alteraPosicao();
        break;
    case 5:
        system("cls");
        printf("\nALTERACAO DE DATA DE NASCIMENTO DO JOGADOR - \n\n");
        altera_DtNascJogador();
        break;
    case 6:
        system("cls");
        printf("\nALTERACAO DE TURMA DO JOGADOR - \n\n");
        altera_TurmaJogador();
        break;
    default:
        break;
    }
}

int menu_QualJogador(int i)
{
    int j = 0;

    if (pTime[i].posicao_jogador == 0)
    {
        menssagem_ERRO(-11);
    }
    else
    {
        if (pTime[i].posicao_jogador > 1)
        {
            j = -1;
            while (j < 0 || j >= pTime[i].posicao_jogador)
            {
                printf("\n");
                printf("Qual o jogador? ");
                scanf("%d", &j);
                fflush(stdin);
                j--;

                if (j < 0 || j >= pTime[i].posicao_jogador)
                {
                    menssagem_ERRO(-10);
                }
            }
        }
    }

    return j;
}

void altera_NomeJogador()
{
    char str_aux[50];
    int i, j;

    i = menu_QualTime();
    j = menu_QualJogador(i);

    printf("\n");
    printf("TIME [%d] - JOGADOR [%d] \n", i + 1, j + 1);
    printf("Nome: ");
    gets(str_aux);
    fflush(stdin);
    pTime[i].jogadores[j].nome = (char *)malloc((strlen(str_aux) + 1) * sizeof(char));
    strcpy(pTime[i].jogadores[j].nome, str_aux);
    fflush(stdin);
}

void altera_MatriculaJogador()
{

    char str_aux[50];
    int i, j;

    i = menu_QualTime();
    j = menu_QualJogador(i);

    printf("\n");
    printf("TIME [%d] - JOGADOR [%d] \n", i + 1, j + 1);
    printf("Matricula: ");
    gets(str_aux);
    fflush(stdin);
    pTime[i].jogadores[j].matricula = (char *)malloc((strlen(str_aux) + 1) * sizeof(char));
    strcpy(pTime[i].jogadores[j].matricula, str_aux);
    fflush(stdin);
}

void altera_CamisaJogador()
{

    int i, j;

    i = menu_QualTime();
    j = menu_QualJogador(i);

    printf("\n");
    printf("TIME [%d] - JOGADOR [%d] \n", i + 1, j + 1);
    printf("Numero da Camisa: ");
    scanf("%d", &pTime[i].jogadores[j].num_Camisa);
    fflush(stdin);
}

void menu_alteraPosicao()
{

    int op = 1;

    while (op != 4)
    {
        if (op < 1 || op > 4)
        {
            menssagem_ERRO(0);
        }

        printf("\n");
        printf("MENU ALTERAR POSICOES\n");
        printf("1. Incluir Posicao\n");
        printf("2. Alterar Posicao\n");
        printf("3. Excluir Posicao\n");
        printf("4. Voltar\n");
        printf("OPCAO: ");
        scanf("%d", &op);
        fflush(stdin);
        op_MenuAlteraPosicao(op);
    }
}

void op_MenuAlteraPosicao(int op)
{

    switch (op)
    {
    case 1:
        incluirPosicao();
        break;
    case 2:
        alterarPosicao();
        break;
    case 3:
        excluirPosicaoJogador();
        break;
    default:
        break;
    }
}

void alterarPosicao()
{

    int i, j;
    char op = 's';

    i = menu_QualTime();
    j = menu_QualJogador(i);

    printf("TIME [%d] - JOGADOR [%d] \n", i + 1, j + 1);

    while (op == 's' || op == 'S')
    {
        incluirPosicao(i, pTime[i].jogadores[j].pos_posicao);
        printf("Posicao - \n");

        do
        {
            printf("- Goleiro (1)\t- AlaE (4)\n- AlaD (2)\t- Fixo  (5)\n- Pivo (3)\n");
            scanf("%d", &pTime[i].jogadores[j].posicao[pTime[i].jogadores[j].pos_posicao]);
            fflush(stdin);
            if (pTime[i].jogadores[j].posicao[pTime[i].jogadores[j].pos_posicao - 1] < 1 || pTime[i].jogadores[j].posicao[pTime[i].jogadores[j].pos_posicao - 1] > 5)
            {
                printf("aa");
            }
        } while (pTime[i].jogadores[j].posicao[pTime[i].jogadores[j].pos_posicao - 1] < 1 || pTime[i].jogadores[j].posicao[pTime[i].jogadores[j].pos_posicao - 1] > 5);
    }
}

void altera_DtNascJogador()
{
    int i, j;

    i = menu_QualTime();
    j = menu_QualJogador(i);

    printf("\n");
    printf("TIME [%d] - JOGADOR [%d] \n", i + 1, j + 1);

    do
    {
        printf("Data de Nascimento - \n");
        printf("Ano: ");
        scanf("%d", &pTime[i].jogadores[j].data_Nasc.ano);
        printf("Mes: ");
        scanf("%d", &pTime[i].jogadores[j].data_Nasc.mes);
        printf("Dia: ");
        scanf("%d", &pTime[i].jogadores[j].data_Nasc.dia);
        if (validaData(pTime[i].jogadores[j].data_Nasc.dia, pTime[i].jogadores[j].data_Nasc.mes, pTime[i].jogadores[j].data_Nasc.ano) == 0)
        {
            menssagem_ERRO(-8);
        }

    } while (validaData(pTime[i].jogadores[j].data_Nasc.dia, pTime[i].jogadores[j].data_Nasc.mes, pTime[i].jogadores[j].data_Nasc.ano) == 0);
}

void altera_TurmaJogador()
{
    int i, j, k;
    int turma;

    i = menu_QualTime();
    j = menu_QualJogador(i);

    printf("\n");
    printf("TIME [%d] - JOGADOR [%d] \n\n", i + 1, j + 1);

    printf("Turmas Cadastradas - \n");

    for (k = 0; k < num_turmas; k++)
    {
        printf("Turma [%d] -\n", k + 1);
        printf("Nome - %s\n", pTurma[k].nome);
    }

    do
    {
        printf("Turma do Jogador: ");
        scanf("%d", &turma);
        fflush(stdin);
        turma--;

        if (turma < 0 || turma > (num_turmas - 1))
        {
            menssagem_ERRO(-7);
        }

    } while ((turma < 0 || turma > (num_turmas - 1)) || (limiteTurmas_time(pTime[i].posicao_turma, pTurma[turma]) == 1));

    pTime[i].jogadores[j].turma = pTurma[turma];

    if (limiteTurmas_time(pTime[i].posicao_turma, pTurma[turma]) == 0)
    {
        pTime[i].turmas[pTime[i].posicao_turma++] = pTurma[turma];
    }
}

void incluirPosicao()
{
    int i, j;
    Tjogador *jogador;

    i = menu_QualTime();
    j = menu_QualJogador(i);

    jogador = &pTime[i].jogadores[j];

    // Aloca ou realoca o array de posições
    jogador->posicao = (enum_posicao *)realloc(jogador->posicao, (jogador->pos_posicao + 1) * sizeof(enum_posicao));

    if (jogador->posicao == NULL)
    {
        menssagem_ERRO(-1);
        // Tratar erro aqui (por exemplo, liberar memória e encerrar o programa)
    }

    // Incrementa a quantidade de posições
    jogador->pos_posicao++;

    // Solicita a nova posição até que seja válida
    do
    {
        printf("Posicao - \n");
        printf("- Goleiro (1)\t- AlaD (2)\n- AlaE (3)\t- Pivo  (4)\n- Fixo (5)\n");
        scanf("%d", &jogador->posicao[jogador->pos_posicao - 1]);

        if (jogador->posicao[jogador->pos_posicao - 1] < Goleiro || jogador->posicao[jogador->pos_posicao - 1] > Fixo)
        {
            menssagem_ERRO(-5);
        }
    } while (jogador->posicao[jogador->pos_posicao - 1] < Goleiro || jogador->posicao[jogador->pos_posicao - 1] > Fixo);
}

void menuJogador(int pos_time)
{
    char op = 's';

    printf("JOGADORES - \n");
    while (op == 's' || op == 'S')
    {
        printf("\n");
        printf("Jogador [%d] - \n", pTime[pos_time].posicao_jogador + 1);
        inclusao_jogador(pTime[pos_time].posicao_jogador);
        pTime[pos_time].posicao_jogador++;
        printf("Adicionar Jogador? (s/qualquer outro caractere para n): ");
        scanf(" %c", &op);
        fflush(stdin);
    }
}

void excluirTime()
{
    int pos, j;

    printf("\nTimes Cadastrados - \n");
    lista_time();
    pos = menu_QualTime(); //
    if (confirmaEscolha() == 1)
    {

        if (pos == 0 && num_times == 1) // if (posJ == 0 && _Times[posT].pos_jogador == 1)
        {

            num_times--;
            free(pTime);
        }
        else if ((num_times - 1) == pos)
        {
            num_times--;
            pTime = (Ttime *)realloc(pTime, num_times * sizeof(Ttime));

            if (pTime == NULL)
            {
                menssagem_ERRO(-1);
                // freeMemory();
                // exit(1);
            }
        }
        else
        {
            for (j = pos; j < num_times; j++)
            {
                pTime[pos] = pTime[pos + 1];
            }
            num_times--;

            pTime = (Ttime *)realloc(pTime, num_times * sizeof(Ttime));

            if (pTime == NULL)
            {
                menssagem_ERRO(-1);
                // freeMemory();
                // exit(1);
            }
        }
    }
    printf("\nTurma Excluida Com Sucesso!\n");
}

void excluirPosicaoJogador()
{
    int i, k;
    enum_posicao posicao;

    printf("\nLista de jogadores e suas posições:\n");
    for (i = 0; i < num_times; i++)
    {
        for (k = 0; k < pTime[i].posicao_jogador; k++)
        {
            printf("- Jogador: %s, Posição: %d\n", pTime[i].jogadores[k].nome, pTime[i].jogadores[k].posicao);
        }
    }

    printf("\nDigite a posição do jogador a ser excluída (1 - Goleiro, 2 - AlaD, 3 - AlaE, 4 - Fixo, 5 - Pivo): ");
    scanf("%d", (int *)&posicao);
    fflush(stdin);

    if ((posicao < Goleiro) || (posicao > Pivo))
    {
        printf("\nPosição inválida!\n");
        return;
    }

    printf("\nPosições já definidas para essa posição:\n");
    for (i = 0; i < num_times; i++)
    {
        for (k = 0; k < pTime[i].posicao_jogador; k++)
        {
            if (pTime[i].jogadores[k].posicao == posicao)
            {
                printf("- Jogador: %s\n", pTime[i].jogadores[k].nome);
            }
        }
    }

    if (pTime[i].posicao_jogador == 0)
    {
        printf("\nNenhum jogador encontrado para a posição selecionada.\n");
        return;
    }

    int posicaoEscolhida;
    printf("\nDigite a posição já definida que deseja excluir: ");
    scanf("%d", &posicaoEscolhida);

    for (i = 0; i < num_times; i++)
    {
        for (k = 0; k < pTime[i].posicao_jogador; k++)
        {
            if (pTime[i].jogadores[k].posicao == posicao && pTime[i].jogadores[k].posicao == posicaoEscolhida)
            {
                for (int j = k; j < pTime[i].posicao_jogador - 1; j++)
                {
                    pTime[i].jogadores[j] = pTime[i].jogadores[j + 1];
                }

                pTime[i].posicao_jogador--;
                k--;
            }
        }
    }

    printf("\nPosição de jogador excluída com sucesso!\n");
}

void excluirJogador()
{
    char nome[50];
    int i, posicao;

    // Exibir jogadores cadastrados no time
    printf("\nJogadores cadastrados no time:\n");
    for (i = 0; i < pTime->posicao_jogador; i++)
    {
        printf("- %s\n", pTime->jogadores[i].nome);
    }

    printf("\nDigite o nome do jogador a ser excluído: ");
    scanf("%s", nome);
    fflush(stdin);

    for (i = 0; i < pTime->posicao_jogador; i++)
    {
        if (strcmp(pTime->jogadores[i].nome, nome) == 0)
        {
            posicao = i;
            break;
        }
    }

    if (i == pTime->posicao_jogador)
    {
        printf("\nJogador não encontrado!\n");
        return;
    }

    for (i = posicao; i < pTime->posicao_jogador - 1; i++)
    {
        pTime->jogadores[i] = pTime->jogadores[i + 1];
    }

    pTime->posicao_jogador--;
    printf("\nJogador excluído com sucesso!\n");
}

int confirmaEscolha() // MUDAR RETURNS PARA VERDADEIRO E FALSO FUNÇÃO BOOLEANA TALVEZ
{
    char op;

    printf("Confirmar escolha? [S/qualquer outro caractere para N] - ");
    scanf(" %c", &op);
    fflush(stdin);
    if (op == 's' || op == 'S')
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
